{"version":3,"sources":["Products.js","Cart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Meta","Card","Products","_ref","db","addProduct","pageChanged","react_default","a","createElement","row","products","slice","page","map","p","col","span","card","className","cover","alt","src","image","actions","icon","type","onClick","avatar","title","name","description","price","pagination","defaultCurrent","total","length","onChange","Cart","changeQuantity","list","itemLayout","dataSource","cart","renderItem","item","Item","href","e","reduce","sum","quantity","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","axios","get","then","res","data","setState","push","console","log","i","indexOf","parseInt","target","value","_this3","react_router_dom","menu","handleClick","selectedKeys","current","mode","key","to","react_router","path","exact","render","src_Products","assign","addProductToCart","bind","src_Cart","React","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.c199e4a4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nimport { Card, Icon, Avatar,Row,Col,Pagination } from 'antd';\nconst { Meta } = Card;\n\n\nfunction Products ({db,addProduct,pageChanged}){\n     let pageSize =10;\n      return(\n        <div>\n          {/* <button onClick={this.addProduct(p)}>Add</button> */}\n        <Row>\n            {db.products.slice((db.page-1)*pageSize,db.page*pageSize).map(p=> <Col span={6}><Card\n            className='col-12'\n      // style={{ width: 300 }}\n      cover={\n        <img\n          alt=\"example\"\n          src={p.image}\n        />\n      }\n      actions={[<Icon type=\"plus\" onClick={()=>{addProduct(p)}} />, <Icon type=\"edit\" />, <Icon type=\"ellipsis\" />]}\n    >\n      <Meta\n        avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n        title={p.name}\n        description={p.price}\n      />\n    </Card></Col>)}\n    </Row>\n    <Pagination defaultCurrent={1} total={db.products.length} onChange={(p)=>{pageChanged(p)}} ></Pagination>\n\n    </div>\n      )\n     \n  \n  }\n\n  export default Products;","import React from 'react';\nimport logo from './logo.svg';\nimport 'antd/dist/antd.css';\nimport { List, Avatar } from 'antd';\n\n\n\nfunction Cart({db,changeQuantity}){\n\n    return (\n        <div>\n        <List\n        changeQuantity={changeQuantity}\n        itemLayout=\"horizontal\"\n        dataSource={db.cart}\n        renderItem={item => (\n          <List.Item>\n            <List.Item.Meta\n              avatar={<Avatar src={item.image} />}\n              title={<a href=\"https://ant.design\">{item.name}</a>}\n              description={item.price}\n            />\n                            <div>\n                                <select onChange={(e)=>{changeQuantity(item,e)}}>\n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                </select>\n                            </div>\n\n          </List.Item>\n        \n        )}\n      /> \n       <h2>Total : {db.cart.reduce((sum,item)=>sum+item.price*item.quantity,0)}</h2>\n      \n       </div>\n    )\n}\n\nexport default Cart;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Menu, Icon,Pagination } from 'antd';\n\nimport Products from './Products';\nimport Cart from './Cart';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\n\nclass App extends React.Component{\n\n  constructor(props){\n   super(props)\n    this.state= {}\n    this.state.db = {\n\n    products : [ ],\n    cart :[],\n    page:1\n\n   }\n\n\n\n  }\n\n  componentDidMount(){\n    axios.get('http://5cfe5a23ca949b00148d3ff2.mockapi.io/products')\n    .then((res)=>{\n      \n    let db = this.state.db;\n    db.products = res.data;\n      this.setState({\n         db:db\n      })\n    })\n  }\n\n\n  addProductToCart(item){\n   let db = this.state.db;\n   item.quantity = 1;\n   db.cart.push(item);\n   this.setState(\n     {db:db}\n   )\n   console.log(db);\n\n  }\n\n  pageChanged(page){\n    let db = this.state.db;\n    db.page = page;\n    this.setState(\n      {db:db}\n    )\n  }\n\n  changeQuantity(item,e){\n\n    let db = this.state.db;\n    let i = db.cart.indexOf(item)\n     db.cart[i].quantity = parseInt(e.target.value); \n    this.setState(\n      {db:db}\n    )\n    console.log(db);\n  }\n\n\n  render(){ return (\n    <div>\n      <Router>\n        <Menu onClick={this.handleClick} selectedKeys={[this.state.current]} mode=\"horizontal\">\n        <Menu.Item key=\"mail\">\n        <Link to=\"/\"> <Icon type=\"home\" />\n          Home\n          </Link>\n        </Menu.Item>\n        <Menu.Item key=\"app\">\n          <Link to=\"/cart\"><Icon type=\"shopping-cart\" />\n          Cart\n          </Link>\n        </Menu.Item>\n        </Menu>\n    \n      <Route path=\"/\" exact render={props=><Products  {...props} db={this.state.db} addProduct={this.addProductToCart.bind(this)}  pageChanged={this.pageChanged.bind(this)}></Products>}/>\n      <Route path=\"/cart\" render={props=><Cart {...props} db={this.state.db} changeQuantity={this.changeQuantity.bind(this)}></Cart>}/>\n    </Router>\n    </div>\n     \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}